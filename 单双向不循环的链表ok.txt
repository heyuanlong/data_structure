#include<stdio.h>//单向链表兼单项链表的插入
#include<stdlib.h>
struct student
{
  char name[10];
  int score;
  struct student *next;
};
struct student *shuru(int n);//返回指针型函数
void shuchu(struct student *head);//输出
void xiaohui(struct student *head);//销毁

void main()
{int i;
  struct student *p；
   scanf("%d",&i);//确定链表长度
   p=shuru(i);
shuchu(p);
xiaohui(p);
}

struct student *shuru(int n)
{ int i;//输入
  struct student *p1,*p2,*head=NULL;//head是指向头的，p2是指向链表尾的，p1是新申请的
  for(i=0;i<n;i++)
  {
    p1=(struct student *)malloc(sizeof student);
    scanf("%s",p1->name);
      scanf("%d",&p1->score);
    if(head==NULL)head=p1;//应该加入p1->next=NULL，安全
    else p2->next=p1;////应该加入p1->next=NULL，安全
    p2=p1;
  }
   p2->next=NULL;

printf("插入一项是插到第一项的后面；请输入");
    p1=(struct student *)malloc(sizeof student);
        scanf("%s",p1->name);
        scanf("%d",&p1->score);
    p1->next=head->next;//关键
    head->next=p1;



printf("；至少3项；；删除第3项；请输入");
p1=head->next->next;
head->next->next=head->next->next->next;
free(p1);

   return head;
}

void shuchu(  struct student *head)
{//输出
    struct student *p;
  p=head;
  while(p)
  {
    printf("%s",p->name);
    printf("%d",p->score);
    puts("");
    p=p->next;
  }
}
void xiaohui(struct student *head)//销毁
{
  struct student *p;
  while(head)
  {
    p=head;
    head=head->next;
    free(p);
  }
}





#include <stdio.h>//双向链表这里的双向链表不循环哦
#include <stdlib.h>
struct student
{
  char name[10];
  int score;
  struct student *next;//后驱指针
  struct student *last;//前驱指针
};
struct student *shuru(int n);
void shuchu(struct student *head);
void xiaohui(struct student *head)//销毁

void main()
{int i;
  struct student *p；
   scanf("%d",&i);//确定链表长度
   p=shuru(i);
shuchu(p);
xiaohui(p);
xiaohui(p);
}

struct student *shuru(int n)
{ int i;//输入
  struct student *p1,*p2,*head=NULL;//head是指向头的，p2是指向链表尾的，p1是新申请的
  for(i=0;i<n;i++)
  {
    p1=(struct student *)malloc(sizeof student);
    scanf("%s",p1->name);
      scanf("%d",&p1->score);

    if(head==NULL){head=p1;p1->last=NULL;}//应该加入p1->next=NULL，安全
    else {p2->next=p1;p1->last=p2;}//应该加入p1->next=NULL，安全
    p2=p1;
  }
   p2->next=NULL;


printf("，前面的项不能少于2项，，插入一项是插到第一项的后面；请输入");
    p1=(struct student *)malloc(sizeof student);
        scanf("%s",p1->name);
        scanf("%d",&p1->score);
    p1->next=head->next;//关键
    (head->next)->last=p1;
    head->next=p1;
    p1->last=head;



//是先形成右边的指针的，，再形成左边的
   return head;
}

void shuchu(struct student *head)
{//输出
    struct student *p,*k;
  p=head;

while(p){
  //顺序输出
    printf("%s",p->name);
    printf("%d",p->score);
    puts("");
      if(p->next==NULL)k=p;//给逆序输出留下结点地址
    p=p->next;
  
}
while(k){//逆序输出
    printf("%s",k->name);
    printf("%d",k->score);
    puts("");
    k=k->last;
  
}
  
}
void xiaohui(struct student *head)//销毁
{
  struct student *p;
  while(head)
  {
    p=head;
    head=head->next;
    free(p);
  }
}
